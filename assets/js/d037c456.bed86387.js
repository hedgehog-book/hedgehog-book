"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[454],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=m(e,["components","mdxType","originalType","parentName"]),p=s(n),d=i,f=p["".concat(l,".").concat(d)]||p[d]||c[d]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m.mdxType="string"==typeof e?e:i,o[1]=m;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6369:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return m},metadata:function(){return s},toc:function(){return c}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],m={},l=void 0,s={unversionedId:"Probability and Statistics/Minimum-k",id:"Probability and Statistics/Minimum-k",title:"Minimum-k",description:"mink(input1 Number, dim any[] | Mat",source:"@site/math/Probability and Statistics/Minimum-k.mdx",sourceDirName:"Probability and Statistics",slug:"/Probability and Statistics/Minimum-k",permalink:"/math/Probability and Statistics/Minimum-k",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Maximum",permalink:"/math/Probability and Statistics/Maximum"},next:{title:"Minimum",permalink:"/math/Probability and Statistics/Minimum"}},u={},c=[{value:"<code>mink(input1: any[] | Mat, k: Number, dim: Number) : any[] | Mat</code>",id:"minkinput1-any--mat-k-number-dim-number--any--mat",level:4}],p={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"minkinput1-any--mat-k-number-dim-number--any--mat"},(0,a.kt)("inlineCode",{parentName:"h4"},"mink(input1: any[] | Mat, k: Number, dim: Number) : any[] | Mat")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"param")," ",(0,a.kt)("inlineCode",{parentName:"p"},"input1")," - the 1d list or 2d matrix/JS array to find the k smallest elements of "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"param")," ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," - the number of smallest elements we want to find. For example, k=2 will return a subset of the two smallest elements. (in the direction of ",(0,a.kt)("inlineCode",{parentName:"p"},"dim"),")"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"param")," ",(0,a.kt)("inlineCode",{parentName:"p"},"dim")," '1' | '2' - the direction you want to find the smallest elements for 2d matrices. Dim =1 means column and dim =2 means row. This is needed because the user may want to differentiate and only find the smallest say, 2, elements in a 3x3 matrix in the direction of columns. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"returns:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"any[] | Mat")," - If A is a matrix, it will return a matrix whose columns or rows contain the k smallest elements of each columns or rows of A (based on the parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"dim"),"), specifically returned as a Mat object. If it is a list, it'll return a list containing the k smallest elements of that list"),(0,a.kt)("p",null,"This function is simple despite having a large amount of parameters and text. It effectively returns the k smallest elements. And for a matrix, you have to provide it a dimension (default is dim = 1, columns), it will return the k smallest elements in each column of A, as a new matrix. It's like ",(0,a.kt)("inlineCode",{parentName:"p"},"min()")," where it returns the smallest values, but can returns more now, specified by the parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),". "),(0,a.kt)("iframe",{src:"https://hlab.app/s/docs/hbook_mink",width:"100%",height:"600px"}))}d.isMDXComponent=!0}}]);