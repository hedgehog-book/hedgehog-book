"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3968],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=p(n),d=a,f=l["".concat(s,".").concat(d)]||l[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=l;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},553:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],u={},s=void 0,p={unversionedId:"Basic Operations/bounds",id:"Basic Operations/bounds",title:"bounds",description:"",source:"@site/math/Basic Operations/bounds.mdx",sourceDirName:"Basic Operations",slug:"/Basic Operations/bounds",permalink:"/math/Basic Operations/bounds",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Greatest Common Divisor",permalink:"/math/Basic Operations/Greatest Common Divisor"},next:{title:"use latex here",permalink:"/math/Basic Operations/factorial"}},c={},m=[{value:"<code>bounds(input: any[] | Mat | Tensor, dim: Number) : Mat | any[]</code>",id:"boundsinput-any--mat--tensor-dim-number--mat--any",level:4}],l={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"boundsinput-any--mat--tensor-dim-number--mat--any"},(0,o.kt)("inlineCode",{parentName:"h4"},"bounds(input: any[] | Mat | Tensor, dim: Number) : Mat | any[]")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"param")," ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," a series of number, or an array, matrix, tensor to get the min and max"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"param")," ",(0,o.kt)("inlineCode",{parentName:"p"},"dim")," (optional and defualt 0), '0'-(bound of all), '1'-(bound of column), '2'-(bound of row)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"returns:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Mat | any[]")," - 1-d array or 2-d matrix ","[min, max]",", [","[min1, min2]",", ","[max1, max2]","], [","[min1, max1]",", ","[min2, max2]","]"),(0,o.kt)("p",null,"This function simply finds the minimum and maximum value of the given input, where it is a series of numbers, an array, or a matrix/Mat. For 2d arrays/Mat objects, you can use the dim parameter to determine if you get the bounds of all values or according to row or column."),(0,o.kt)("iframe",{src:"https://hlab.app/s/LinJianan/bounds_hbook",width:"100%",height:"500px"}))}d.isMDXComponent=!0}}]);