"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9597],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=u(n),m=a,f=l["".concat(p,".").concat(m)]||l[m]||h[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=l;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},1818:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return h}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={},p=void 0,u={unversionedId:"Properties/The Shape",id:"Properties/The Shape",title:"The Shape",description:"shape(input any[]",source:"@site/math/Properties/The Shape.mdx",sourceDirName:"Properties",slug:"/Properties/The Shape",permalink:"/math/Properties/The Shape",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The Number of Dimensions",permalink:"/math/Properties/The Number of Dimensions"},next:{title:"trace",permalink:"/math/Properties/trace"}},c={},h=[{value:"<code>shape(input: any[] | Mat | Tensor) : any[]</code>",id:"shapeinput-any--mat--tensor--any",level:4}],l={toc:h};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"shapeinput-any--mat--tensor--any"},(0,o.kt)("inlineCode",{parentName:"h4"},"shape(input: any[] | Mat | Tensor) : any[]")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"param")," ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," - The construct you want to find the shape of. Can be a 1d array/list, 2d matrix, higher dimension JS array or Mat object or Tensor. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"returns:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"any[]")," - A row vector specifying the shape. Namely, the numbers in each index represent the length of each dimension. For example a return value of ","[3,4]"," means the shape of the construct was a 3x4 matrix. It had 3 rows and 4 columns. A return value of ","[10]"," is the length of the list, i.e. the shape of the 1d array. It has 1 dimension, and that dimension has length 10."),(0,o.kt)("p",null,"This function gives us the shape of various constructs whether they are 1d, 2d, or higher dimensional JS arrays, Mat objects or Tensors. The shape is a row vector that informs us of the lengths of each dimension of said construct. For example, if you were to have a large matrix with 100 rows and 50 columns, I would tell you the shape is ","[100,50]",". If it was a list with 20 elements, it would be a shape of ","[20]",". If it was a tensor with 5 dimensions, where dimension 1 had 3 rows, dimension 2 had 4 columns, dimension 3 had height 3, dimension 4 had length 2, and dimension 5 had length 4, we would have a shape of ","[3,4,3,2,4]","."),(0,o.kt)("iframe",{src:"https://hlab.app/s/docs/hbook_shape",width:"100%",height:"500px"}))}m.isMDXComponent=!0}}]);