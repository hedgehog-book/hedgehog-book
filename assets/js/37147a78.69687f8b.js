"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7946],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=u(r),m=o,b=f["".concat(l,".").concat(m)]||f[m]||p[m]||a;return r?n.createElement(b,i(i({ref:t},c),{},{components:r})):n.createElement(b,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5829:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={},l=void 0,u={unversionedId:"Basic Operations/floor",id:"Basic Operations/floor",title:"floor",description:"floor(input Number | any[] | Mat | Tensor[]",source:"@site/math/Basic Operations/floor.mdx",sourceDirName:"Basic Operations",slug:"/Basic Operations/floor",permalink:"/math/Basic Operations/floor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"use latex here",permalink:"/math/Basic Operations/factorial"},next:{title:"sum",permalink:"/math/Basic Operations/sum"}},c={},p=[{value:"<code>floor(input: Number | any[] | Mat | Tensor) : Number | any[] | Mat | Tensor[]</code>",id:"floorinput-number--any--mat--tensor--number--any--mat--tensor",level:4}],f={toc:p};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"floorinput-number--any--mat--tensor--number--any--mat--tensor"},(0,a.kt)("inlineCode",{parentName:"h4"},"floor(input: Number | any[] | Mat | Tensor) : Number | any[] | Mat | Tensor[]")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"param")," ",(0,a.kt)("inlineCode",{parentName:"p"},"input")," - the construct to find the floor of its numbers, element-wise. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"returns:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Number | any[] | Mat | Tensor")," - The construct with the elements reflected as their floor values"),(0,a.kt)("p",null,"The floor of a number is the closest INTEGER below that number. For example, the closest integer below 5 is, well, 5. The closest integer below 5.9 is 5. The closest below 6.0001 is 6. And so on. This function takes in a number, list, matrix, Mat or Tensor and finds the floor of all elements and returns the input construct with all the elements now being the floor elements. "),(0,a.kt)("iframe",{src:"https://hlab.app/s/docs/hbook_floor",width:"100%",height:"500px"}))}m.isMDXComponent=!0}}]);