"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6106],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),f=r,y=m["".concat(c,".").concat(f)]||m[f]||l[f]||i;return n?o.createElement(y,a(a({ref:t},u),{},{components:n})):o.createElement(y,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,a[1]=p;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2137:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return l}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],p={},c=void 0,s={unversionedId:"Decompositions/The Cholesky Decomposition",id:"Decompositions/The Cholesky Decomposition",title:"The Cholesky Decomposition",description:"cholesky(input any[]",source:"@site/math/Decompositions/The Cholesky Decomposition.mdx",sourceDirName:"Decompositions",slug:"/Decompositions/The Cholesky Decomposition",permalink:"/math/Decompositions/The Cholesky Decomposition",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"QR Decomposition",permalink:"/math/Decompositions/QR Decomposition"},next:{title:"LU-Solve",permalink:"/math/Linear Equation Systems/LU-Solve"}},u={},l=[{value:"<code>cholesky(input: any[] | Mat) : any[]</code>",id:"choleskyinput-any--mat--any",level:4}],m={toc:l};function f(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"choleskyinput-any--mat--any"},(0,i.kt)("inlineCode",{parentName:"h4"},"cholesky(input: any[] | Mat) : any[]")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"param")," ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," - The matrix to decompose using the cholesky method. Needs to be symmetric (hermitian) and positive definite (if the number z^T",(0,i.kt)("em",{parentName:"p"},"M"),"z > 0 for every non-zero column vector z for M=input, but that's not what we're concerned with)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"returns:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"any[]")," - The matrix ",(0,i.kt)("inlineCode",{parentName:"p"},"L")," from the decomposition ",(0,i.kt)("inlineCode",{parentName:"p"},"L*L^T = input")),(0,i.kt)("p",null,"This function decomposes a positive definite, symmetric (hermitian) matrix using the cholesky method. It returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"L")," part of the decomposition, ",(0,i.kt)("inlineCode",{parentName:"p"},"L*L^T = A")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," would be the input. If the input is not positive definite you will have a exception thrown. "),(0,i.kt)("iframe",{src:"https://hlab.app/s/docs/cholesky_hbook",width:"100%",height:"500px"}))}f.isMDXComponent=!0}}]);